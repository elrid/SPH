#version 400


layout(triangles, equal_spacing, cw) in;
in vec3 tcPosition[];
in vec3 tcNormal[];
out vec3 tePosition;
out vec3 teWorldPosition;
out vec3 teNormal;
uniform mat4 Projection;
uniform int generateNormals;
uniform mat4 Modelview;
uniform mat4 ModelMatrix;

vec3 Pi(vec3 q, int i, mat3 normals)
{
    vec3 tr = q-tcPosition[i];
    return q - dot(tr,normals[i])*normals[i];
}

vec3 normlze(vec3 _in)
{
    float len = sqrt(float(_in.x*_in.x + _in.y*_in.y + _in.z*_in.z));
    return _in/float(len);
}

void main()
{
    mat3 normals;

    mat3 p = mat3(tcPosition[0],tcPosition[1], tcPosition[2]);
    
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    float w = gl_TessCoord.z;

    for(int i=0; i<3; i++)
    {
        if(generateNormals==1)
            normals[i] = vec3(cross(p[(i+1)%3] - p[i], p[(i+2)%3] - p[i]));
        else
            normals[i] = vec3(tcNormal[i]);
    }

    float alpha = 1;
    bool isPlanet = true;
    tePosition = u*p[0] + v*p[1] + w*p[2];
    if(isPlanet)
    {
        tePosition = normlze(tePosition);
    }
    else
    {
        tePosition =  (1-alpha)*tePosition + alpha*(u*Pi(tePosition,0,normals) + v*Pi(tePosition,1,normals) + w*Pi(tePosition,2,normals));
    }

    teNormal = (u*normals[0] + v*normals[1] + w*normals[2]);
    teNormal = normlze((ModelMatrix*vec4(teNormal, 1) - ModelMatrix*vec4(0,0,0, 1)).xyz);
    teWorldPosition = (ModelMatrix * vec4(tePosition, 1)).xyz;
    gl_Position = vec4(Projection * Modelview * dvec4(tePosition, 1));
}